name: Build Docker image

on:
  workflow_dispatch:
  push:

env:
  IMAGE_BASE: freetakteam/ui
  IMAGE_TAG: :${{ github.ref_name }}
  IMAGE_SHA: ${{ github.sha }}
  OC_REGISTRY: ghcr.io

jobs:
  lint:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        python-version: ["3.11"]
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install flake8
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
  test:
    runs-on: ubuntu-latest
    needs: lint
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.11"]
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Test with pytest
      run: |
        pytest
  build_docker_image:
    name: Docker Build
    runs-on: ubuntu-22.04
    needs:
      - lint
      - test
    steps:
    - uses: actions/checkout@v4
    - name: Build the container image
      # can this be converted to podman at some point to be more foss?
      run: docker build . --file Dockerfile --tag $OC_REGISTRY/$IMAGE_BASE:$IMAGE_TAG --tag $OC_REGISTRY/$IMAGE_BASE:$IMAGE_SHA --label "runnumber=${GITHUB_RUN_ID}"

    - name: Log in to registry
      run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login $OC_REGISTRY -u $ --password-stdin

    - name: Push image to registry
      run: |
        echo IMAGE_BASE=$IMAGE_BASE
        docker push $OC_REGISTRY/$IMAGE_BASE:$IMAGE_TAG
        docker push $OC_REGISTRY/$IMAGE_BASE:$IMAGE_SHA

