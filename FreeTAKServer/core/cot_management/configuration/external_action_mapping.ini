[actionmapping]
; deal with the case of a new connection, this will return all repeated
; messages for which the user is authorized
; Request 
;  action: Connection
;  context: Repeater
;  values:
;    connection (Connection): the connection object of the new connection
; Response values:
;  next action: publish
;  context: repeater
;  values:
;    message (List[Node]): a list of node objects representing repeated messages
?Repeater?Connection = FreeTAKServer.core.cot_management.cot_management_facade.CotManagement.Received
; get all the repeated messages
; Request 
;  action: GetRepeatedMessages
;  context: Repeater
;  values:
;
; Response values:
;  next action: GetRepeatedMessages
;  context: repeater
;  values:
;    message (List[Node]): a list of node objects representing repeated messages
?Repeater?GetRepeatedMessages = FreeTAKServer.core.cot_management.cot_management_facade.CotManagement.Received
; add a message to be repeated
; Request 
;  action: CreateRepeatedMessage
;  context: Repeater
;  values:
;    message (List[Node]): a list of nodes to be added to repeated messages
; Response values:
;  next action: CreateRepeatedMessage
;  context: Repeater
;  values:
;    success (boolean): whether the operation succeeded
?Repeater?CreateRepeatedMessage = FreeTAKServer.core.cot_management.cot_management_facade.CotManagement.Received
; delete a repeated message
; Request 
;  action: DeleteRepeatedMessage
;  context: Repeater
;  values:
;    ids (List[str]): a list of object ids of repeated messages to be deleted
; Response values:
;  next action: DeleteRepeatedMessage
;  context: Repeater
;  values:
;    success (boolean): whether the operation succeeded
?Repeater?DeleteRepeatedMessage = FreeTAKServer.core.cot_management.cot_management_facade.CotManagement.Received

[CotManagement]
__class = FreeTAKServer.core.cot_management.cot_management_facade.CotManagement

[Request]
__class = digitalpy.core.zmanager.impl.default_request.DefaultRequest

[ActionMapper]
__class = digitalpy.core.zmanager.impl.default_action_mapper.DefaultActionMapper

[event_manager]
__class = digitalpy.core.main.impl.default_event_manager.DefaultEventManager

[Response]
__class = digitalpy.core.zmanager.impl.default_response.DefaultResponse